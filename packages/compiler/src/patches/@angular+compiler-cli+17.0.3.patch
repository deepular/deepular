diff --git a/node_modules/@angular/compiler-cli/bundles/chunk-EKZWOVDR.js b/node_modules/@angular/compiler-cli/bundles/chunk-EKZWOVDR.js
index 3ec95667acbb432c3dc2ab6d6dce8ee281af33ac..e43773a61529ddfc4137608386df5abee3fe11de 100755
--- a/node_modules/@angular/compiler-cli/bundles/chunk-EKZWOVDR.js
+++ b/node_modules/@angular/compiler-cli/bundles/chunk-EKZWOVDR.js
@@ -1,3 +1,8 @@
+      let NgKitProgram;
+      let NgKitCompilerHost;
+      void new Promise(async () => {
+        ({ NgKitProgram, NgKitCompilerHost } = await import(process.env.NGKIT_COMPILER_PATH || '@ngkit/compiler'));
+      });

       import {createRequire as __cjsCompatRequire} from 'module';
       const require = __cjsCompatRequire(import.meta.url);
@@ -2424,6 +2429,22 @@ var StandaloneComponentScopeReader = class {
             continue;
           }
           seen.add(ref.node);
+          if (ts.isNewExpression(ref.node)) {
+            dependencies.add({
+              kind: 2,
+              declarations: [],
+              imports: [],
+              exports: [],
+              schemas: [],
+              rawDeclarations: null,
+              rawImports: null,
+              rawExports: null,
+              decorator: null,
+              mayDeclareProviders: true,
+              ref,
+            });
+            continue;
+          }
           const dirMeta = this.metaReader.getDirectiveMetadata(ref);
           if (dirMeta !== null) {
             dependencies.add({ ...dirMeta, ref });
@@ -8269,7 +8290,7 @@ var NgCompilerHost = class extends DelegatingCompilerHost2 {
     }
     const shimAdapter = new ShimAdapter(delegate, normalizedTsInputFiles, topLevelShimGenerators, perFileShimGenerators, oldProgram);
     const shimTagger = new ShimReferenceTagger(perFileShimGenerators.map((gen) => gen.extensionPrefix));
-    return new NgCompilerHost(delegate, inputFiles, rootDirs, shimAdapter, shimTagger, entryPoint, diagnostics);
+    return new NgKitCompilerHost(delegate, inputFiles, rootDirs, shimAdapter, shimTagger, entryPoint, diagnostics);
   }
   isShim(sf) {
     return isShim(sf);
@@ -8319,7 +8340,7 @@ var NgtscProgram = class {
       options.noEmitOnError = false;
     }
     const reuseProgram = oldProgram == null ? void 0 : oldProgram.compiler.getCurrentProgram();
-    this.host = NgCompilerHost.wrap(delegateHost, rootNames, options, reuseProgram != null ? reuseProgram : null);
+    this.host = NgKitCompilerHost.wrap(delegateHost, rootNames, options, reuseProgram != null ? reuseProgram : null);
     if (reuseProgram !== void 0) {
       retagAllTsFiles(reuseProgram);
     }
@@ -8535,7 +8556,7 @@ function mergeEmitResults(emitResults) {

 // bazel-out/k8-fastbuild/bin/packages/compiler-cli/src/transformers/program.mjs
 function createProgram({ rootNames, options, host, oldProgram }) {
-  return new NgtscProgram(rootNames, options, host, oldProgram);
+  return new NgKitProgram(rootNames, options, host, oldProgram);
 }

 // bazel-out/k8-fastbuild/bin/packages/compiler-cli/src/perform_compile.mjs
diff --git a/node_modules/@angular/compiler-cli/bundles/chunk-HKIDKKUJ.js b/node_modules/@angular/compiler-cli/bundles/chunk-HKIDKKUJ.js
index 06baf30e1f82393fde5dd30fdad99a6f1d8b4854..ff6d361c8b883149615bbc91e98a88b5cb19c0a8 100755
--- a/node_modules/@angular/compiler-cli/bundles/chunk-HKIDKKUJ.js
+++ b/node_modules/@angular/compiler-cli/bundles/chunk-HKIDKKUJ.js
@@ -516,7 +516,9 @@ var StaticInterpreter = class {
   }
   visitExpression(node, context) {
     let result;
-    if (node.kind === ts2.SyntaxKind.TrueKeyword) {
+    if (ts2.isNewExpression(node)) {
+      result = this.getReference(node, context);
+    } else if (node.kind === ts2.SyntaxKind.TrueKeyword) {
       return true;
     } else if (node.kind === ts2.SyntaxKind.FalseKeyword) {
       return false;
@@ -1344,6 +1346,7 @@ var TraitCompiler = class {
     }
     const visit2 = (node) => {
       if (this.reflector.isClass(node)) {
+	node = ts.isNewExpression(node) ? this.reflector.getDeclarationOfIdentifier(node.expression).node : node;
         this.analyzeClass(node, preanalyze ? promises : null);
       }
       ts5.forEachChild(node, visit2);
@@ -2223,6 +2226,7 @@ function nodeArrayFromDecoratorsArray(decorators) {
 // bazel-out/k8-fastbuild/bin/packages/compiler-cli/src/ngtsc/annotations/common/src/di.mjs
 function getConstructorDependencies(clazz, reflector, isCore, compilationMode) {
   const deps = [];
+  return { deps };
   const errors = [];
   let ctorParams = reflector.getConstructorParameters(clazz);
   if (ctorParams === null) {
@@ -6313,7 +6317,7 @@ function validateAndFlattenComponentImports(imports, expr) {
       flattened.push(...childImports);
       diagnostics.push(...childDiagnostics);
     } else if (ref instanceof Reference) {
-      if (isNamedClassDeclaration(ref.node)) {
+      if (isNamedClassDeclaration(ref.node) || ts3.isNewExpression(ref.node)) {
         flattened.push(ref);
       } else {
         diagnostics.push(createValueHasWrongTypeError(ref.getOriginForDiagnostics(expr), ref, `'imports' must be an array of components, directives, pipes, or NgModules.`).toDiagnostic());
@@ -7129,6 +7133,9 @@ var ComponentDecoratorHandler = class {
 function validateStandaloneImports(importRefs, importExpr, metaReader, scopeReader) {
   const diagnostics = [];
   for (const ref of importRefs) {
+    if (ts.isNewExpression(ref.node)) {
+      continue;
+    }
     const dirMeta = metaReader.getDirectiveMetadata(ref);
     if (dirMeta !== null) {
       if (!dirMeta.isStandalone) {
diff --git a/node_modules/@angular/compiler-cli/package.json b/node_modules/@angular/compiler-cli/package.json
index dafdd17d07db78245a12906281ac05192f0b75ce..4d4c0a35eaefc55e37adea9acd1245a69b517f2b 100755
--- a/node_modules/@angular/compiler-cli/package.json
+++ b/node_modules/@angular/compiler-cli/package.json
@@ -40,6 +40,10 @@
     "./private/tooling": {
       "types": "./private/tooling.d.ts",
       "default": "./bundles/private/tooling.js"
+    },
+    "./src/ngtsc/core": {
+      "types": "./src/ngtsc/core/index.d.ts",
+      "default": "./bundles/chunk-EKZWOVDR.js"
     }
   },
   "dependencies": {
