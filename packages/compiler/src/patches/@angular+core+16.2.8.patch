diff --git a/node_modules/@angular/core/index.d.ts b/node_modules/@angular/core/index.d.ts
index 721e9e1b3452b552111fada061e11b59ac369785..4aacab2ca5ca4606fe70ba2d27949c65f8743f5a 100755
--- a/node_modules/@angular/core/index.d.ts
+++ b/node_modules/@angular/core/index.d.ts
@@ -10,6 +10,7 @@ import { Observable } from 'rxjs';
 import { Subject } from 'rxjs';
 import { Subscribable } from 'rxjs';
 import { Subscription } from 'rxjs';
+import { AppModule } from '@ngkit/injector';

 /**
  * @description
@@ -1176,7 +1177,7 @@ export declare interface Component extends Directive {
      * More information about standalone components, directives, and pipes can be found in [this
      * guide](guide/standalone-components).
      */
-    imports?: (Type<any> | ReadonlyArray<any>)[];
+    imports?: (Type<any> | ReadonlyArray<any> | AppModule)[];
     /**
      * The set of schemas that declare elements to be allowed in a standalone component. Elements and
      * properties that are neither Angular components nor directives must be declared in a schema.
diff --git a/node_modules/@angular/core/fesm2022/core.mjs b/node_modules/@angular/core/fesm2022/core.mjs
index db5a783a8d62829e5aca095233e59edd9f0086c9..0752b4af43dfe2ed85f822ee70227bc6d75a3282 100755
--- a/node_modules/@angular/core/fesm2022/core.mjs
+++ b/node_modules/@angular/core/fesm2022/core.mjs
@@ -1989,7 +1989,11 @@ function extractDefListOrFactory(dependencies, pipeDef) {
     }
     const defExtractor = pipeDef ? getPipeDef$1 : extractDirectiveDef;
     return () => (typeof dependencies === 'function' ? dependencies() : dependencies)
-        .map(dep => defExtractor(dep))
+        .flatMap(dep => {
+            const ngModuleDef = getNgModuleDef(dep);
+            if (!ngModuleDef) return defExtractor(dep);
+            return extractDefListOrFactory(ngModuleDef.exports, pipeDef)();
+        })
         .filter(nonNull);
 }
 /**
